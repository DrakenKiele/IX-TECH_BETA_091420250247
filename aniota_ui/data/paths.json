{
  "IX-TECH": "IX-TECH.code-workspace",
  "_paths": "paths.py",
  "settings": ".vscode/settings.json",
  "tasks": ".vscode/tasks.json",
  "copilot-instructions": ".github/copilot-instructions.md",
  "main": "backend/main.py",
  "aniota_presence": "backend/aniota_presence.py",
  "aniota_behaviors": "backend/aniota_behaviors.py",
  "base_module": "backend/base_module.py",
  "config": "backend/config.py",
  "spe": "backend/core/spe.py",
  "tpai": "backend/core/tpai.py",
  "caf_core": "backend/core/caf_core.py",
  "core_models": "backend/core/models.py",
  "perception_models": "backend/perception/models.py",
  "core_spe_perception": "backend/core/spe_perception.py",
  "perception_spe_perception": "backend/perception/spe_perception.py",
  "caf": "backend/core/caf.py",
  "caf_clean": "backend/core/caf_clean.py",
  "sie": "backend/learning/sie.py",
  "htm": "backend/learning/htm.py",
  "rfm": "backend/learning/rfm.py",
  "lrs": "backend/learning/lrs.py",
  "pdm": "backend/learning/pdm.py",
  "caf_learn": "backend/learning/caf_learn.py",
  "wms": "backend/memory/wms.py",
  "ldm": "backend/memory/ldm.py",
  "ieb": "backend/memory/ieb.py",
  "caf_mem": "backend/memory/caf_mem.py",
  "caf_coms_manager": "backend/coms/caf_coms_manager.py",
  "__init__": "config/__init__.py",
  "default": "config/default.py",
  "development": "config/development.py",
  "production": "config/production.py",
  "secrets": "config/secrets.py",
  "start_stack": "utils/start/start_stack.py",
  "static_server": "utils/start/static_server.py",
  "Dockerfile": "utils/start/Dockerfile",
  "test_entrypoint": "utils/test/test_entrypoint.py",
  "test_main": "utils/test/test_main.py",
  "find_missing_sections": "utils/maint/find_missing_sections.py",
  "unblanker": "utils/maint/unblanker.py",
  "setPaths": "utils/maint/setPaths.py",
  "aniota_orb_electron_aniota_orb": "aniota_orb_electron/aniota_orb.js",
  "package": "aniota_orb_electron/package.json",
  "package-lock": "aniota_orb_electron/package-lock.json",
  ".gitignore": "aniota_orb_electron/.gitignore",
  "icon_target": "aniota_orb_electron/icon_target.svg",
  "aniota_splash": "aniota_web/aniota_splash.html",
  "aniota_about": "aniota_web/aniota_about.html",
  "aniota_launcher": "aniota_web/aniota_launcher.html",
  "aniota_field": "aniota_web/aniota_field.html",
  "aniota_epicenter": "aniota_web/aniota_epicenter.html",
  "Notes Regading Sensing Management": "___CHATGPT/Notes Regading Sensing Management.md",
  "walkthrough": "docs/walkthrough.md",
  "code_tree": "docs/code_tree.md",
  "+common sense in problem solving": "docs/+common sense in problem solving.md",
  "+Aniota - Nuts and Bolts": "docs/+Aniota - Nuts and Bolts.md",
  "+ALL REQUIREMENTS": "docs/+ALL REQUIREMENTS.md",
  "requirements": "docs/requirements.txt",
  "credentials": "docs/credentials.md"
}# 2025-09-11 | [XX]    | [Description]                        | [Reason]
# -----------------------------------------------------------------------------

# File: package.json
# Purpose: Central entry point and orchestrator for the system.
#
# Type: Main launcher script (not a class file, but acts as a system controller)
#
# Responsibilities:
#   - Loads configuration and resolves paths for all major dependencies ([List dependencies])
#   - Checks and manages the status of critical services (starts/stops as needed)
#   - Launches and monitors all core services:
#       * [Service 1] ([Tech/Port])
#       * [Service 2] ([Tech/Port])
#       * [Service 3] ([Tech/Port])
#       * [Service 4] ([Tech/Port])
#   - Provides command-line flags for status reporting and service termination ([flags])
#   - Handles process cleanup and error reporting
#
# Key Functions:
#   - main(): Orchestrates the full launch sequence and handles CLI flags
#   - launch_service(): Starts a subprocess for a given service
#   - stream_logs(): Streams and truncates logs from subprocesses
#   - run_static_server(): Runs the static file server (if applicable)
#   - is_port_in_use(): Checks if a TCP port is active
#   - get_service_status(): Returns a dict of service statuses
#   - check_service(): Ensures a service is running, starts if not
#   - resolve_path(): Finds the first valid path for a dependency from config
#   - find_dependency_path(): Locates the executable for a dependency
#
# Relationships:
#   - Reads from configuration files for dependency paths
#   - Launches and monitors other scripts and processes
#   - Interacts with the OS for process and port management
#
# Usefulness & Execution Path:
#   - main() is the required entry point and is always used.
#   - [List of essential functions] are all actively used and essential for orchestrating the system.
#   - [Legacy/optional functions] may become obsolete as the system evolves.
#
# Suggestions:
#   - **Performance:** [Performance notes]
#   - **Code Cleanliness:** [Code cleanliness notes]
#   - **Location:** [Location notes]
#   - **Function:** [Function notes]
#   - **Legacy:** [Legacy notes]
#   - **Config:** [Config notes]
#   - **Error Handling:** [Error handling notes]
#   - **Cross-Platform:** [Cross-platform notes]
#
# Summary:
#   - This file is essential, well-placed, and mostly clean.
#   - All major functions are used and support the requirements for modularity, orchestration, and portability.
#   - Minor cleanup (removing redundant code, legacy functions) is recommended to enhance maintainability.
#   - Overall, it effectively serves as the central controller for the system.
#
# CHANGE MANAGEMENT LOG
# Date        | Initials | Description of Change                | Reason for Change
# -----------------------------------------------------------------------------
# 2025-09-11 | [XX]    | [Description]                        | [Reason]
# -----------------------------------------------------------------------------
