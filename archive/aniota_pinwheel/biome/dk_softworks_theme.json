/*
BREADCRUMB: aniota_ui/biome > dk_softworks_theme.json
This file defines the official DK Softworks LLC color and typography theme for Aniota's professional UI components.

Program Flow Placement:
  - Used by: aniota_ui/biome/AniotaBiome_modular.js and related UI modules for consistent theming
  - Consumed by: Visual renderer and UI layout modules

Purpose:
  - Centralizes color, font, and effect definitions for all serious/professional interfaces
  - Ensures brand consistency and easy theme updates

Key Structure:
  - theme: Metadata and usage
  - colors: Jewel tones, grays, text, backgrounds
  - typography: Fonts and sizes
  - effects: Shadows and glows

Suggestions:
  - Extend with additional color palettes for new features
  - Document any changes in the change log below

CHANGE MANAGEMENT LOG
Date        | Initials | Description of Change                | Reason for Change
-------------------------------------------------------------------------------
2025-09-05  | GH       | Added modular file header with program flow info | Enable traceable, modular documentation
-------------------------------------------------------------------------------
*/
{
  "theme": {
    "name": "DK Softworks LLC Official",
    "version": "1.0.0",
    "trademark": true,
    "description": "Official DK Softworks LLC trademarked color theme for serious/professional interfaces",
    "usage": "All serious nature pages and professional interfaces"
  },
  "colors": {
    "jewel_tones": {
      "ruby_red": "#800020",
      "emerald_green": "#355E3B", 
      "sapphire_blue": "#082567",
      "ruby_dark": "#5D001E",
      "emerald_dark": "#2A4A2F",
      "sapphire_dark": "#061A4E"
    },
    "grays": {
      "charcoal": "#2C2C2C",
      "slate": "#484848",
      "silver": "#808080",
      "light_gray": "#BDBDBD",
      "pearl": "#E8E8E8",
      "white_smoke": "#F5F5F5"
    },
    "text": {
      "primary_dark": "#000000",
      "primary_light": "#FFFFFF",
      "secondary_dark": "#2C2C2C",
      "secondary_light": "#F5F5F5",
      "accent": "#800020"
    },
    "backgrounds": {
      "primary": "linear-gradient(135deg, #2C2C2C 0%, #484848 50%, #2C2C2C 100%)",
      "secondary": "linear-gradient(45deg, #0F52BA 0%, #50C878 50%, #D73527 100%)",
      "overlay": "rgba(44, 44, 44, 0.9)",
      "glass": "rgba(245, 245, 245, 0.1)"
    }
  },
  "typography": {
    "fonts": {
      "primary": "'Noto Sans Rounded', Arial, Helvetica, sans-serif",
      "heading": "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      "monospace": "'Consolas', 'Monaco', 'Courier New', monospace"
    },
    "sizes": {
      "heading_large": "2.5em",
      "heading_medium": "1.8em", 
      "heading_small": "1.2em",
      "body": "1em",
      "caption": "0.85em"
    }
  },
  "effects": {
    "shadows": {
      "soft": "0 2px 8px rgba(0, 0, 0, 0.15)",
      "medium": "0 4px 16px rgba(0, 0, 0, 0.25)",
      "strong": "0 8px 32px rgba(0, 0, 0, 0.35)"
    },
    "glows": {
      "ruby": "0 0 20px rgba(128, 0, 32, 0.6)",
      "emerald": "0 0 20px rgba(53, 94, 59, 0.6)",
      "sapphire": "0 0 20px rgba(8, 37, 103, 0.6)"
    },
    "borders": {
      "jewel_gradient": "linear-gradient(45deg, #800020, #355E3B, #082567)",
      "subtle": "1px solid rgba(255, 255, 255, 0.2)",
      "prominent": "2px solid rgba(255, 255, 255, 0.4)"
    }
  },
  "ui_elements": {
    "buttons": {
      "primary": {
        "background": "linear-gradient(135deg, #800020, #5D001E)",
        "text": "#FFFFFF",
        "border": "none",
        "shadow": "0 4px 16px rgba(128, 0, 32, 0.4)",
        "hover_scale": 1.05
      },
      "secondary": {
        "background": "linear-gradient(135deg, #355E3B, #2A4A2F)", 
        "text": "#FFFFFF",
        "border": "none",
        "shadow": "0 4px 16px rgba(53, 94, 59, 0.4)",
        "hover_scale": 1.05
      },
      "accent": {
        "background": "linear-gradient(135deg, #082567, #061A4E)",
        "text": "#FFFFFF", 
        "border": "none",
        "shadow": "0 4px 16px rgba(8, 37, 103, 0.4)",
        "hover_scale": 1.05
      }
    },
    "panels": {
      "glass": {
        "background": "rgba(245, 245, 245, 0.1)",
        "border": "1px solid rgba(255, 255, 255, 0.2)",
        "backdrop_filter": "blur(10px)",
        "border_radius": "12px"
      },
      "solid": {
        "background": "rgba(44, 44, 44, 0.95)",
        "border": "1px solid rgba(255, 255, 255, 0.1)",
        "border_radius": "8px"
      }
    }
  }
}
# 2025-09-11 | [XX]    | [Description]                        | [Reason]
# -----------------------------------------------------------------------------

# File: package.json
# Purpose: Central entry point and orchestrator for the system.
#
# Type: Main launcher script (not a class file, but acts as a system controller)
#
# Responsibilities:
#   - Loads configuration and resolves paths for all major dependencies ([List dependencies])
#   - Checks and manages the status of critical services (starts/stops as needed)
#   - Launches and monitors all core services:
#       * [Service 1] ([Tech/Port])
#       * [Service 2] ([Tech/Port])
#       * [Service 3] ([Tech/Port])
#       * [Service 4] ([Tech/Port])
#   - Provides command-line flags for status reporting and service termination ([flags])
#   - Handles process cleanup and error reporting
#
# Key Functions:
#   - main(): Orchestrates the full launch sequence and handles CLI flags
#   - launch_service(): Starts a subprocess for a given service
#   - stream_logs(): Streams and truncates logs from subprocesses
#   - run_static_server(): Runs the static file server (if applicable)
#   - is_port_in_use(): Checks if a TCP port is active
#   - get_service_status(): Returns a dict of service statuses
#   - check_service(): Ensures a service is running, starts if not
#   - resolve_path(): Finds the first valid path for a dependency from config
#   - find_dependency_path(): Locates the executable for a dependency
#
# Relationships:
#   - Reads from configuration files for dependency paths
#   - Launches and monitors other scripts and processes
#   - Interacts with the OS for process and port management
#
# Usefulness & Execution Path:
#   - main() is the required entry point and is always used.
#   - [List of essential functions] are all actively used and essential for orchestrating the system.
#   - [Legacy/optional functions] may become obsolete as the system evolves.
#
# Suggestions:
#   - **Performance:** [Performance notes]
#   - **Code Cleanliness:** [Code cleanliness notes]
#   - **Location:** [Location notes]
#   - **Function:** [Function notes]
#   - **Legacy:** [Legacy notes]
#   - **Config:** [Config notes]
#   - **Error Handling:** [Error handling notes]
#   - **Cross-Platform:** [Cross-platform notes]
#
# Summary:
#   - This file is essential, well-placed, and mostly clean.
#   - All major functions are used and support the requirements for modularity, orchestration, and portability.
#   - Minor cleanup (removing redundant code, legacy functions) is recommended to enhance maintainability.
#   - Overall, it effectively serves as the central controller for the system.
#
# CHANGE MANAGEMENT LOG
# Date        | Initials | Description of Change                | Reason for Change
# -----------------------------------------------------------------------------
# 2025-09-11 | [XX]    | [Description]                        | [Reason]
# -----------------------------------------------------------------------------
